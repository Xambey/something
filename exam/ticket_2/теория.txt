Механизм сигналов и слотов
Элементы графического интерфейса определенным образом реагируют на действия пользо-вателя и посылают сообщения. Существует несколько вариантов такого решения.
Старая концепция функций обратного вызова (callback functions), лежащая в основе X Window System, основана на использовании обычных функций, которые должны вы- зываться в результате действий пользователя. Применение такой концепции значительно

Глава 2. Философия объектной модели 37
усложняет исходный код программы, делая его менее понятным. Кроме того, отсутствует возможность производить проверку типов возвращаемых значений, потому что во всех слу-чаях возвращается указатель на пустой тип void. Например, для того чтобы сопоставить код с кнопкой, необходимо передать в функцию указатель на кнопку. Если пользователь нажи-мает на кнопку, функция будет вызвана. Сами библиотеки не проверяют, были ли аргумен-ты, переданные в функцию, требуемого типа, а это часто является причиной сбоев. Другой недостаток функций обратного вызова заключается в том, что элементы графического ин-терфейса пользователя тесно связаны с функциональными частями программы и это, в свою очередь, заметно усложняет разработку классов независимо друг от друга. Одним из ярких представителей этой концепции является библиотека Motif.
Важно помнить, что Motif и Windows API предназначены для процедурного программиро-вания, и с реализацией объектно-ориентированных проектов, наверняка, появятся труд- ности.
Для программирования в ОС Windows существуют специальные библиотеки классов языка C++, облегчающие программирование для этой операционной системы. Самой популярной библиотекой является Microsoft Foundation Classes (MFC). Ее можно, с большой натяжкой, назвать объектно-ориентированной, т. к. она создавалась людьми, не подозревающими о существовании самых элементарных принципов объектно-ориентированного подхода. ОдОдна из самых фундаментальных заповедей объектно-ориентированного подхода — это инкапсу-ляция, которая запрещает оставлять атрибуты классов незащищенными (ведь тогда объекты могут читать и изменять данные без ведома объекта-владельца), но, несмотря на это, во многих MFC-классах это требование не соблюдено. Сама библиотека MFC является над-стройкой, предоставляющей доступ к функциям Windows, реализованным на языке C, что заставляет разработчиков время от времени использовать устаревшие структуры, не вписы-вающиеся в рамки концепции объектно-ориентированного подхода. Интересно также отме-тить, что сама Microsoft для реализации широко известной программы Microsoft Word не использует MFC вообще.
При использовании MFC для обеспечения связей сообщения и методов обработки исполь-зуются специальные макросы — так называемые карты сообщений (листинг 2.3). Они очень сильно загромождают исходный код программы, заметно снижая ее читаемость.